#include <LiquidCrystal.h>
int test, press = 0, release = 0, snooze_cnt = 0, counter = 0, counter2 = 0, counter3 = 0, hour = 9, minute = 5, b1 = 7, b2 = 8, b3 = 9, b4 = 10, btn_counter = 0, am_pm = 0, buzzerpin = 6, switching_time = 0, milis_time = 0, current_process = 0, b1_hold_time = 0, b1_processed = 0, b1_step = 0, alarm_state = 0, b2_hold_time = 0, b2_processed = 0, b2_step = 0, alarm_minute = 0, alarm_hour = 0, hour_before_alarm = 0, minute_before_alarm = 0, temp_pin = A0,temp = 0,temp_val = 0;
unsigned long alarm_stop = 0;
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
void setup() {
  //SET PINS OF THE COMPONENTS
  pinMode(b1, INPUT);
  pinMode(b2, INPUT);
  pinMode(b3, INPUT);
  pinMode(b4, INPUT);
  pinMode(buzzerpin, OUTPUT);
  pinMode(A0,INPUT);
  //INITIALIZE LCD
  lcd.begin(16, 2);
  Serial.begin(9600);
  cli();
  //INITIALIZE INTERRUPT REGISTERS
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1 = 0;
  OCR1A = 4464;
  TCCR1B |= (1 << WGM12);
  TCCR1B |= (1 << CS12) | (1 << CS10);
  TIMSK1 |= (1 << OCIE1A);
  TCCR0A = 0;
  TCCR0B = 0;
  TCNT0 = 0;
  OCR0A = 7812;
  TCCR0B |= (1 << WGM12);
  TCCR0B |= (1 << CS12) | (1 << CS10);
  TIMSK2 |= (1 << OCIE0A);
  TIMSK0|=(1<<OCIE0A); 
  sei();
  TCCR0B|=(1<<CS01);    
  TCCR0B|=(1<<CS00);
}
//DIFFERENT DISPLAYS OF LCD UPDATES TO EVERY ACTION ON BUTTONS
int timer_calculating(int x) {
  if (switching_time % 2 == 0) { 
    if (x == 1 || x == 2) {
      lcd.setCursor(0, 1);
    } else {
      lcd.clear();
      lcd.setCursor(0, 0);
    }
    if (counter > 59) {
      minute++;
      counter = 0;
    }
    if (minute > 59) {
      hour++;
      minute = 0;
    }
    if ((hour > 12) && (am_pm == 0)) { 
      hour = 1;
      am_pm = 1;
    }
    if ((hour > 12) && (am_pm == 1)) { 
      hour = 1;
      am_pm = 0;
    }
    if (hour <= 9) {
      lcd.print(0);
      lcd.print(hour);
      lcd.print(":");
    } else {
      lcd.print(hour);
      lcd.print(":");
    }
    if (minute <= 9) {
      lcd.print(0);
      lcd.print(minute);
    } else
      lcd.print(minute);
    if (am_pm == 0)
      lcd.print(" AM");
    else
      lcd.print(" PM");
  } else { 
    if (x == 1 || x == 2) {
      lcd.setCursor(0, 1);
    } else {
      lcd.clear();
      lcd.setCursor(0, 0);
    }
    if (counter > 59) {
      minute++;
      counter = 0;
    }
    if (minute > 59) {
      hour++;
      minute = 0;
    }
    if (hour > 24) {
      hour = 1;
    }
    if (hour <= 9) {
      lcd.print(0);
      lcd.print(hour);
      lcd.print(":");
    } else {
      lcd.print(hour);
      lcd.print(":");
    }
    if (minute <= 9) {
      lcd.print(0);
      lcd.print(minute);
    } else
      lcd.print(minute);
  }
  if (x == 0) {
    if (alarm_state == 0) {
      lcd.setCursor(10, 1);
      lcd.print("A:OFF");
    } else {
      lcd.setCursor(11, 1);
      lcd.print("A:ON");
    }
  }
}
ISR(TIMER1_COMPA_vect) //UPDATE CLOCK EVERY SECOND
{
  counter++;
  if (current_process == 0) {
    timer_calculating(0);
 	temp_calc();
  }
}
ISR(TIMER2_COMPA_vect) 
{
  if (current_process > 0) {
    return;
  } else {
    if (digitalRead(b1) == HIGH && b1_processed == 0) {
      switching_time += 1;
      counter2 += 100;
      if (counter2 >= 3000) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Set Clock:");
        set_clock();
        current_process = 1;
        b1_processed = 1;
        b1_step = 1;
        counter2 = 0;
      }
    } else
      counter2 = 0;
    // SETTING ALARM MODE
    if (digitalRead(b2) == HIGH && b2_processed == 0) { 
      switching_time += 1;
      counter3 += 100;
      if (counter3 >= 3000*6) {
        lcd.clear();
        lcd.setCursor(0, 0);
		hour_before_alarm = hour;
		minute_before_alarm = minute;
		if(alarm_hour > 0 && alarm_minute > 0) {
			hour = alarm_hour;
			minute = alarm_minute;
		}
        lcd.print("Set Alarm:");
        set_alarm();
        current_process = 2;
        b2_processed = 1;
        b2_step = 1;
        counter3 = 0;
      }
    } else {
	  if(counter3 > 0) {
		 if(alarm_state == 0) {
			alarm_state = 1; 
		 }
		 else if(alarm_state == 1) {
			alarm_state = 0;
		 }
	  }
      counter3 = 0;
	}
  }
}
int set_clock() {
  timer_calculating(1);
}
int set_alarm() {
  timer_calculating(2);
}
int set_snooze(int x) {
  if ((x % 2) != 0)
    digitalWrite(buzzerpin, HIGH);
  else
    digitalWrite(buzzerpin, LOW);
}
int temp_calc(){  // TEMPARATURE MODE SWITCHES
  if((temp_val%2)==0){
  temp=analogRead(temp_pin);
  temp=((temp*4.88)-500)/10;
	lcd.setCursor(0,1);
    lcd.print(temp);
    lcd.print((char)178);
    lcd.print("C");
  } 
    else if((temp_val%2)!=0)
  {
  temp=analogRead(temp_pin);
  temp=((temp*4.88)-500)/10;
  temp=((temp*9)/5)+(32);
      Serial.print(temp);
	lcd.setCursor(0,1);
    lcd.print(temp);
    lcd.print((char)178);
    lcd.print("F");
  }
}
void loop() {
  //IF STATEMENTS FOR ALARM ACTIONS
  if(alarm_state == 1 && alarm_stop == 0 && hour == alarm_hour && minute == alarm_minute) {
	snooze_cnt = 1;
  }	
  if (snooze_cnt == 1 && digitalRead(b4) == HIGH)
  {
	  alarm_stop = 1;
  }	
  if(alarm_stop > 0 && digitalRead(b4) == LOW) {  
	snooze_cnt = 0;
	alarm_stop+= millis()*2.5;
	if(alarm_stop > 60 * 5 * 1000) {
		alarm_stop = 0;
		if(alarm_state == 1) {
			snooze_cnt = 1;	
		}
	}
  }  
  set_snooze(snooze_cnt); // SETTING SNOOZE ACTION
  if (current_process == 1) {
    if (digitalRead(b1) == HIGH && b1_processed == 0) {
      b1_hold_time += millis() * 10;
      if (b1_hold_time >= 2000) {
        b1_processed = 1;
        b1_hold_time = -1;
        b1_step++;
        if (b1_step > 2) {
		  counter2 = 0;
          current_process = 0;
        }
      }  //CHECK IF B1 HOLD FOR SET MODE
    } else if (digitalRead(b1) == LOW && b1_hold_time > 0 && b1_processed == 0) {
      b1_hold_time = 0;
      if (b1_step == 1) {
        hour++;
      } else if (b1_step == 2) {
        minute++;
      }
    }
    lcd.setCursor(0, 0); //DISPLAY SETUP FOR SET CLOCK MODE
    if (b1_step == 1) {
      lcd.print("Set Hour  ");
    } else if (b1_step == 2) {
      lcd.print("Set Minute");
    }
    timer_calculating(1);
  }
  else if(current_process == 2) {  
    if (digitalRead(b2) == HIGH && b2_processed == 0) {
      b2_hold_time += millis() * 10;
      if (b2_hold_time >= 2000) {
        b2_processed = 1;
        b2_hold_time = -1;
        b2_step++;
        if (b2_step > 2) {
		  counter3 = 0;
          current_process = 0;
		  alarm_hour = hour;
		  alarm_minute = minute;
		  hour = hour_before_alarm;
		  minute = minute_before_alarm;
		  alarm_state = 1;
        }
      }
    } //CHECKING IF HOLD
    else if (digitalRead(b2) == LOW && b2_hold_time > 0 && b2_processed == 0) {
      b2_hold_time = 0;
      if (b2_step == 1) {
        hour++;
      } else if (b2_step == 2) {
        minute++;
      }
    }
    lcd.setCursor(0, 0); // SWITCH SET ALARM MODE
    if (b2_step == 1) {
      lcd.print("Set Alarm Hour:  ");
    } else if (b2_step == 2) {
      lcd.print("Set Alarm Minute:");
    }	  
    timer_calculating(2);
  }
  if (digitalRead(b1) == LOW && b1_processed == 1) {
    b1_processed = 0;
  }
  if (digitalRead(b2) == LOW && b2_processed == 1) {
    b2_processed = 0;
  }
 if(digitalRead(b3)==HIGH)
	temp_val++;
}
